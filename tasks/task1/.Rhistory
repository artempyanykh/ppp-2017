#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
T_SHOW_BACKTRACE
Sys.setenv(T_SHOW_BACKTRACE)
Sys.setenv("T_SHOW_BACKTRACE")
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
drawStatistics(date, value)
timeSeries = read.csv(file="training.csv", header = TRUE,sep=",")
library(TTR)
library(tseries)
drawStatistics <- function(date, value, n = 10) {
jpeg()
# calculating
# sma
SMAValue <- SMA(value, n = n)
# wma
WMAValue <- WMA(value, n = n)
# ema
EMAValue <- EMA(value, n = n)
# create plot obj
plot(date, value)
# visualisation
# original points
lines(date, value)
# SMA
lines(x = date, y = SMAValue, col = "green")
# WMA
lines(x = date, y = WMAValue, col = "red")
# EMA
lines(x = date, y = EMAValue, col = "blue")
dev.off()
}
removeNA <- function(value) {
value[!is.na(value)]
}
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
drawStatistics(date, value)
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
jpeg()
plot(addModel)
dev.off()
jpeg()
plot(mupltModel)
dev.off()
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
drawStatistics(date, value)
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
jpeg()
plot(addModel)
dev.off()
#jpeg()
#  plot(mupltModel)
# dev.off()
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#  jpeg()
#  plot(addModel)
#  dev.off()
jpeg()
plot(mupltModel)
dev.off()
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#  jpeg()
#  plot(addModel)
#  dev.off()
jpeg()
plot(multModel)
dev.off()
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
drawStatistics(date, value)
value[!is.na(value)]
removeNA <- function(value) {
value[!is.na(value)]
}
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#  jpeg()
#  plot(addModel)
#  dev.off()
adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#  jpeg()
#  plot(addModel)
#  dev.off()
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#  jpeg()
#  plot(addModel)
#  dev.off()
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
adf.test(removeNA(multModel$seasonal), alternative="stationary")
#adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
DecomposeSeries <- function(date, value) {
series = ts(value, frequency = 12, start = c(1959))
logSeries = log(series)
#additive model
addModel <- decompose(logSeries, type = c("additive"))
#multilplication model
multModel <- decompose(logSeries, type = c("additive"))
newDate <- head(date, -6)
#  jpeg()
#  plot(addModel)
#  dev.off()
#adf.test(removeNA(addModel$seasonal), alternative="stationary")
#adf.test(removeNA(addModel$random), alternative="stationary")
#adf.test(removeNA(multModel$seasonal), alternative="stationary")
adf.test(removeNA(multModel$random), alternative="stationary")
#adf.test(diff(removeNA(multModel$seasonal)),"stationary")
#drawStatistics(newDate, head(addModel$seasonal, -6))
#drawStatistics(newDate, head(addModel$random, -6))
#drawStatistics(newDate, head(multModel$seasonal, -6))
#drawStatistics(newDate, head(multModel$random, -6))
}
date <- timeSeries$Date
value <- timeSeries$Value
DecomposeSeries(date, value)
drawStatistics(head(date, -1), diff(value))
adf.test(diff(value), alternative="stationary")
dif <- diff(value)
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
arima = arima(value, order = c(1, 2, 6))
arima
testSeries = read.csv(file="testing.csv", header = TRUE,sep=",")
testDate = testSeries$Date
testValue = testSeries$Value
aForecast = forecast.Arima(arima, h = 60)
install.packages(forecast)
library(forecast)
install.packages("forecast")
aForecast = forecast.Arima(arima, h = 60)
library(forecast)
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
arima = arima(timeSeries, order = c(1, 2, 6))
arima = arima(value, order = c(1, 2, 6), frequency(12), start(1959))
arima = arima(value, order = c(1, 2, 6))
arima
testDate = testSeries$Date
testValue = testSeries$Value
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
trainSer <- ts(value, frequency = 12, start = c(1959))
arima <- arima(trainSer, order = c(1, 2, 6))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col("blue"))
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 2, 6))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col("blue"))
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(testSeries$Value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 2, 6))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
arima <- arima(trainSer, order = c(1, 1, 4))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
arima <- arima(trainSer, order = c(1, 2, 5))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
r2_score <- lm(aForecast$mean~testSer)
summary(r2_score)
r2_score <- lm(aForecast$mean~testSer)
r2_score
summary(r2_score)
r2_score <- lm(aForecast$mean~testSer)
r2_score$r.squared
r2_score.lm <- lm(aForecast$mean~testSer)
r2_score.lm
r2_score.lm <- lm(aForecast$mean~testSer)
r2_score.lm$r.sq
str(summary(r2_score.lm))
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(testSeries$Value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 1, 4))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
r2_score.lm <- lm(aForecast$mean~testSer)
r2_score.lm$r.sq
str(summary(r2_score.lm))
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(testSeries$Value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 2, 6))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
r2_score.lm <- lm(aForecast$mean~testSer)
str(summary(r2_score.lm))
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
arima <- arima(trainSer, order = c(1, 3, 8))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
r2_score.lm <- lm(aForecast$mean~testSer)
str(summary(r2_score.lm))
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
acf <- acf(x = dif,plot = TRUE)
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(testSeries$Value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 5, 9))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(testSeries$Value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 5, 9))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
arima <- arima(trainSer, order = c(1, 3, 8))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(testSeries$Value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 2, 5))
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
AIC(arima)
arima <- arima(trainSer, order = c(1, 3, 8))
AIC(arima)
arima <- arima(trainSer, order = c(1, 10, 80))
AIC(arima)
arima <- arima(trainSer, order = c(1, 3, 8)) # 3 8
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
arima <- arima(trainSer, order = c(1, 3, 8)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
AIC(arima)
arima <- arima(trainSer, order = c(1, 5, 9)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
drawStatistics(date, value)
drawStatistics(date, value, 20)
jpeg()
acf <- acf(x = dif,plot = TRUE)
dev.off()
jpeg()
pacf <- pacf(x = dif, plot = TRUE)
dev.off()
arima <- arima(trainSer, order = c(2, 5, 9)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
arima <- arima(trainSer, order = c(1, 5, 9)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
arima <- arima(trainSer, order = c(1, 5, 8)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
dif <- diff(value)
adf.test(dif, alternative="stationary")
jpeg()
acf <- acf(x = dif,plot = TRUE)
arima <- arima(trainSer, order = c(1, 3, 5)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
M.lm <- lm(aForecast$mean~testSer)
str(summary(M.lm))
trainSer <- ts(value, frequency = 12, start = c(1959))
testSer <- ts(testSeries$Value, frequency = 12, start = c(1989))
arima <- arima(trainSer, order = c(1, 3, 5)) # 3 8
arima
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
3
3
3
3
arima <- arima(trainSer, order = c(1, 3, 8)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
lines(testSer, col = "green")
arima <- arima(trainSer, order = c(1, 3, 8)) # 3 8
arima
aForecast = forecast.Arima(arima, h = 60)
plot(aForecast)
acf <- acf(x = dif,plot = TRUE)
pacf <- pacf(x = dif, plot = TRUE)
